// Copyright (c) 2025 The Excalibur Project Authors
//
// Licensed under multiple licenses:
// - Excalibur License 1.0 (see LICENSE-EXCALIBUR.txt)
// - GNU Affero General Public License v3.0 or later (AGPL-3.0) (see LICENSE-AGPL-3.0.txt)
// - Server Side Public License v1.0 (SSPL-1.0) (see LICENSE-SSPL-1.0.txt)
// - Apache License 2.0 (see LICENSE-APACHE-2.0.txt)
//
// You may not use this file except in compliance with the License terms above. You may obtain copies of the licenses in
// the project root or online.
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

using Excalibur.Domain.Model;

namespace Excalibur.Data.Outbox;

/// <summary>
///   Represents an outbox mechanism to ensure reliable delivery of messages or events by storing them in a persistent store.
/// </summary>
public interface IOutbox
{
	/// <summary>
	///   Tries to unreserve records previously reserved by a dispatcher.
	/// </summary>
	/// <param name="dispatcherId"> The identifier of the dispatcher attempting to unreserve records. </param>
	/// <param name="cancellationToken"> The cancellation token to observe. </param>
	/// <returns> A task representing the asynchronous operation. </returns>
	public Task TryUnReserveOneRecordsAsync(string dispatcherId, CancellationToken cancellationToken);

	/// <summary>
	///   Attempts to reserve a batch of outbox records for a specific dispatcher.
	/// </summary>
	/// <param name="dispatcherId"> The identifier of the dispatcher reserving records. </param>
	/// <param name="batchSize"> The number of records to reserve in the batch. </param>
	/// <param name="cancellationToken"> The cancellation token to observe. </param>
	/// <returns> A task that returns a collection of reserved outbox records. </returns>
	public Task<IEnumerable<OutboxRecord>> TryReserveRecordsAsync(
		string dispatcherId,
		int batchSize,
		CancellationToken cancellationToken);

	/// <summary>
	///   Dispatches a reserved outbox record.
	/// </summary>
	/// <param name="dispatcherId"> The identifier of the dispatcher processing the record. </param>
	/// <param name="record"> The outbox record to dispatch. </param>
	/// <param name="cancellationToken"> The cancellation token to observe. </param>
	/// <returns>
	///   A task that returns <c> true </c> if the record was dispatched successfully; otherwise, <c> false </c>.
	/// </returns>
	public Task<bool> DispatchReservedRecordAsync(string dispatcherId, OutboxRecord record, CancellationToken cancellationToken);

	/// <summary>
	///   Deletes a batch of dispatched outbox records.
	/// </summary>
	/// <param name="outboxIds"> The identifiers of the outbox records to delete. </param>
	/// <param name="cancellationToken"> The cancellation token to observe. </param>
	/// <returns> A task representing the asynchronous delete operation. </returns>
	public Task DeleteOutboxRecordsAsync(IEnumerable<Guid> outboxIds, CancellationToken cancellationToken);

	/// <summary>
	///   Saves domain events generated by an aggregate root to the outbox.
	/// </summary>
	/// <typeparam name="TKey"> The type of the aggregate root identifier. </typeparam>
	/// <param name="aggregate"> The aggregate root containing the events. </param>
	/// <param name="messageHeaders"> The message headers to associate with the events. </param>
	/// <param name="destination"> The destination to which the events will be sent. </param>
	/// <param name="cancellationToken"> The cancellation token to observe. </param>
	/// <returns> A task that returns the number of events saved. </returns>
	public Task<int> SaveEventsAsync<TKey>(
		IAggregateRoot<TKey> aggregate,
		IReadOnlyDictionary<string, string>? messageHeaders,
		string? destination,
		CancellationToken cancellationToken);

	/// <summary>
	///   Saves a batch of messages to the outbox.
	/// </summary>
	/// <param name="messages"> The messages to save. </param>
	/// <param name="cancellationToken"> The cancellation token to observe. </param>
	/// <returns> A task that returns the number of messages saved. </returns>
	public Task<int> SaveMessagesAsync(IEnumerable<OutboxMessage> messages, CancellationToken cancellationToken);
}
