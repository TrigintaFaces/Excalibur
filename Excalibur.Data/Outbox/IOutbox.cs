using Excalibur.Domain.Model;

namespace Excalibur.Data.Outbox;

/// <summary>
///     Represents an outbox mechanism to ensure reliable delivery of messages or events by storing them in a persistent store.
/// </summary>
public interface IOutbox
{
	/// <summary>
	///     Tries to unreserve records previously reserved by a dispatcher.
	/// </summary>
	/// <param name="dispatcherId"> The identifier of the dispatcher attempting to unreserve records. </param>
	/// <param name="cancellationToken"> The cancellation token to observe. </param>
	/// <returns> A task representing the asynchronous operation. </returns>
	public Task TryUnReserveOneRecordsAsync(string dispatcherId, CancellationToken cancellationToken);

	/// <summary>
	///     Attempts to reserve a batch of outbox records for a specific dispatcher.
	/// </summary>
	/// <param name="dispatcherId"> The identifier of the dispatcher reserving records. </param>
	/// <param name="batchSize"> The number of records to reserve in the batch. </param>
	/// <param name="cancellationToken"> The cancellation token to observe. </param>
	/// <returns> A task that returns a collection of reserved outbox records. </returns>
	public Task<IEnumerable<OutboxRecord>> TryReserveOneRecordsAsync(
		string dispatcherId,
		int batchSize,
		CancellationToken cancellationToken);

	/// <summary>
	///     Dispatches a reserved outbox record.
	/// </summary>
	/// <param name="dispatcherId"> The identifier of the dispatcher processing the record. </param>
	/// <param name="record"> The outbox record to dispatch. </param>
	/// <param name="dispatch"> The function responsible for dispatching the record. </param>
	/// <returns> A task that returns the number of records successfully dispatched. </returns>
	public Task<int> DispatchReservedRecordAsync(string dispatcherId, OutboxRecord record);

	/// <summary>
	///     Saves domain events generated by an aggregate root to the outbox.
	/// </summary>
	/// <typeparam name="TKey"> The type of the aggregate root identifier. </typeparam>
	/// <param name="aggregate"> The aggregate root containing the events. </param>
	/// <param name="messageHeaders"> The message headers to associate with the events. </param>
	/// <param name="destination"> The destination to which the events will be sent. </param>
	/// <returns> A task that returns the number of events saved. </returns>
	public Task<int> SaveEventsAsync<TKey>(IAggregateRoot<TKey> aggregate, IReadOnlyDictionary<string, string>? messageHeaders,
		string? destination);

	/// <summary>
	///     Saves a batch of messages to the outbox.
	/// </summary>
	/// <param name="messages"> The messages to save. </param>
	/// <returns> A task that returns the number of messages saved. </returns>
	public Task<int> SaveMessagesAsync(IEnumerable<OutboxMessage> messages);
}
