name: Publish

on:
    push:
        branches:
            - main
            - develop
            - feature/*
            - release/*
            - hotfix/*
    pull_request:

jobs:
    build-and-publish:
        runs-on: windows-latest

        steps:
            # Step 1: Check out the code
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # Step 2: Setup .NET
            - name: Setup .NET
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: "8.0.x"

            # Step 3: Install GitVersion
            - name: Install GitVersion
              uses: gittools/actions/gitversion/setup@v3.1.2
              with:
                  versionSpec: "6.0.x"
                  preferLatestVersion: true

            # Step 4: Determine version with GitVersion
            - name: Determine version
              id: gitversion
              uses: gittools/actions/gitversion/execute@v3.1.2
              with:
                  useConfigFile: true
                  updateAssemblyInfo: true

            # Step 5: Set Release Variables
            - name: Set Release Variables
              run: |
                  $branch = $env:GitVersion_BranchName
                  Write-Host "Branch is: '$branch'"

                  # Logic to set IS_RELEASE or IS_PRERELEASE
                  if ($branch -eq "main" -or $branch -eq "master") {
                    Write-Host "Setting IS_RELEASE to true"
                    "IS_RELEASE=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                  } elseif ($branch -like "release/*") {
                    Write-Host "Setting IS_PRERELEASE to true"
                    "IS_PRERELEASE=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                  }
              shell: pwsh

            # Step 6: Set PUBLISH variable based on branch and event
            - name: Set PUBLISH variable based on branch and event
              run: |
                  if ($env:IS_RELEASE -eq "true" -or $env:IS_PRERELEASE -eq "true") {
                      if ($github.event_name -ne 'pull_request') {
                          "PUBLISH=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                      }
                  }
              shell: pwsh

            # Step 7: Set Release Version
            - name: Set Release Version
              id: set_release_version
              run: |
                  if ($env:IS_RELEASE -eq "true") {
                    "version=${{ steps.gitversion.outputs.MajorMinorPatch }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                  } else {
                    "version=${{ steps.gitversion.outputs.SemVer }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                  }
              shell: pwsh

            # Step 8: Set GitVersion Variables
            - name: Set GitVersion Variables
              run: |
                  "GitVersion_NuGetVersion=$env:version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                  "GitVersion_AssemblySemVer=${{ steps.gitversion.outputs.AssemblySemVer }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                  "GitVersion_AssemblySemFileVer=${{ steps.gitversion.outputs.AssemblySemFileVer }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                  "GitVersion_InformationalVersion=${{ steps.gitversion.outputs.InformationalVersion }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              shell: pwsh

            # Step 9: Restore .NET dependencies
            - name: Restore .NET dependencies
              run: dotnet restore

            # Step 10: Build .NET solution
            - name: Build .NET solution
              run: dotnet build --configuration Release

            # Step 11: Run tests
            - name: Run tests
              run: dotnet test --configuration Release

            # Step 12: Replace <ProjectReference> with <PackageReference>
            - name: Replace ProjectReferences
              if: env.PUBLISH == 'true'
              run: |
                  $env:PACKAGE_VERSION = $env:GitVersion_NuGetVersion
                  Write-Host "Using GitVersion's NuGetVersion: $($env:GitVersion_NuGetVersion)"
                  powershell -ExecutionPolicy Bypass -File scripts/ReplaceProjectReferences.ps1
              shell: powershell

            # Step 13: Pack .csproj files using GitVersion's SemVer
            - name: Create NuGet packages
              if: env.PUBLISH == 'true'
              run: |
                  Write-Host "Packing projects with PackageVersion: $env:GitVersion_NuGetVersion"
                  Write-Host "Packing projects with Version: $env:GitVersion_InformationalVersion"

                  $artifactPath = Join-Path $env:GITHUB_WORKSPACE 'artifacts'

                  if (-Not (Test-Path $artifactPath)) {
                    New-Item -ItemType Directory -Path $artifactPath | Out-Null
                  }

                  $csprojFiles = Get-ChildItem -Path . -Recurse -Filter *.csproj
                  foreach ($file in $csprojFiles) {
                      dotnet pack $file.FullName `
                        --configuration Release `
                        -p:PackageVersion=$env:GitVersion_NuGetVersion `
                        -p:Version=$env:GitVersion_NuGetVersion `
                        --no-build `
                        --output $artifactPath
                  }
              shell: powershell

            # Step 14: Publish NuGet packages
            - name: Publish NuGet packages
              if: env.PUBLISH == 'true'
              run: |
                  $env:NUGET_API_KEY = "${{ secrets.NUGET_API_KEY }}"
                  $artifactPath = Join-Path $env:GITHUB_WORKSPACE 'artifacts'
                  $packages = Get-ChildItem $artifactPath -Filter *.nupkg

                  foreach ($pkg in $packages) {
                      Write-Host "Publishing package: $($pkg.FullName)"
                      dotnet nuget push $pkg.FullName `
                        --api-key $env:NUGET_API_KEY `
                        --source https://api.nuget.org/v3/index.json `
                        --skip-duplicate
                  }
              shell: powershell

            # Step 15: Create Release
            - name: Create GitHub Release
              if: env.PUBLISH == 'true'
              id: create_release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: v$env:version
                  name: Release v$env:version
                  body: "Automated release based on commit history."
                  prerelease: $env:IS_PRERELEASE -eq "true"
                  generate_release_notes: true
                  files: |
                      artifacts/*.nupkg
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
