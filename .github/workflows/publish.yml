name: Publish

on:
    push:
        branches:
            - main
            - develop
            - feature/*
            - release/*
            - hotfix/*
    pull_request:

jobs:
    build-and-publish:
        runs-on: windows-latest

        steps:
            # Step 1: Check out the code
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # Step 2: Setup .NET
            - name: Setup .NET
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: "8.0.x"

            - name: Install GitVersion
              uses: gittools/actions/gitversion/setup@v3.1.2
              with:
                  versionSpec: "6.0.x"
                  preferLatestVersion: true

            # Step 3: GitVersion
            # This action will read GitVersion.yml, look at commits & branches,
            # and produce a semantic version (e.g., 1.2.3, 1.2.3-beta.1, etc.)
            - name: Determine version
              id: gitversion
              uses: gittools/actions/gitversion/execute@v3.1.2
              with:
                  useConfigFile: true
                  updateAssemblyInfo: true

            - name: Set Release Version
              id: set_release_version
              run: |
                  $branch = "${{ github.ref_name }}"
                  if ($branch -eq "main") {
                    Write-Host "::set-output name=version::${{ steps.gitversion.outputs.MajorMinorPatch }}"
                  } else {
                    Write-Host "::set-output name=version::${{ steps.gitversion.outputs.SemVer }}"
                  }
              shell: powershell

            # Step 4: Build
            - name: Restore .NET dependencies
              run: dotnet restore

            - name: Build .NET solution
              run: dotnet build --configuration Release

            - name: Run tests
              run: dotnet test --configuration Release

            # Step 5: Replace <ProjectReference> with <PackageReference>
            - name: Replace ProjectReferences
              run: |
                  $env:PACKAGE_VERSION = "${{ steps.set_release_version.outputs.version }}"
                  Write-Host "Using GitVersion's SemVer: $($env:PACKAGE_VERSION)"
                  powershell -ExecutionPolicy Bypass -File scripts/ReplaceProjectReferences.ps1
              shell: powershell

            # Step 6: Pack .csproj files using GitVersion's SemVer
            - name: Create NuGet packages
              run: |
                  $version = "${{ steps.set_release_version.outputs.version }}"
                  Write-Host "Packing projects with version: $version"

                  $artifactPath = Join-Path $env:GITHUB_WORKSPACE 'artifacts'

                  if (-Not (Test-Path $artifactPath)) {
                    New-Item -ItemType Directory -Path $artifactPath | Out-Null
                  }

                  $csprojFiles = Get-ChildItem -Path . -Recurse -Filter *.csproj
                  foreach ($file in $csprojFiles) {
                      dotnet pack $file.FullName `
                        --configuration Release `
                        -p:PackageVersion=$version `
                        -p:Version=$version `
                        --no-build `
                        --output $artifactPath
                  }
              shell: powershell

            # Step 7: Publish NuGet packages.
            - name: Publish NuGet packages
              if: startsWith(github.ref_name, 'main') || startsWith(github.ref_name, 'develop') || startsWith(github.ref_name, 'release/')
              run: |
                  $env:NUGET_API_KEY = "${{ secrets.NUGET_API_KEY }}"
                  $artifactPath = Join-Path $env:GITHUB_WORKSPACE 'artifacts'
                  $packages = Get-ChildItem $artifactPath -Filter *.nupkg

                  foreach ($pkg in $packages) {
                      Write-Host "Publishing package: $($pkg.FullName)"
                      dotnet nuget push $pkg.FullName `
                        --api-key $env:NUGET_API_KEY `
                        --source https://api.nuget.org/v3/index.json
                  }
              shell: powershell

            # Step 8: Create Release.
            - name: Create GitHub Release
              if: startsWith(github.ref_name, 'main') || startsWith(github.ref_name, 'develop') || github.ref == 'refs/heads/release' || startsWith(github.ref_name, 'release/')
              id: create_release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: v${{ steps.set_release_version.outputs.version }}
                  name: Release v${{ steps.set_release_version.outputs.version }}
                  body: "Automated release based on commit history."
                  prerelease: ${{ github.ref != 'refs/heads/main' }}
                  generate_release_notes: true
                  files: |
                      artifacts/*.nupkg
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
